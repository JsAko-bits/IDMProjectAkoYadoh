/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Delimiteur;
import org.xtext.example.mydsl.myDsl.Fichier;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Predire;
import org.xtext.example.mydsl.myDsl.Regression;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.DELIMITEUR:
				sequence_Delimiteur(context, (Delimiteur) semanticObject); 
				return; 
			case MyDslPackage.FICHIER:
				sequence_Fichier(context, (Fichier) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.PREDIRE:
				sequence_Predire(context, (Predire) semanticObject); 
				return; 
			case MyDslPackage.REGRESSION:
				sequence_Regression(context, (Regression) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Delimiteur returns Delimiteur
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Delimiteur(ISerializationContext context, Delimiteur semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DELIMITEUR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DELIMITEUR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelimiteurAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Fichier returns Fichier
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Fichier(ISerializationContext context, Fichier semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FICHIER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FICHIER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFichierAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     regressions=Regression
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MODEL__REGRESSIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MODEL__REGRESSIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getRegressionsRegressionParserRuleCall_0(), semanticObject.getRegressions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Predire returns Predire
	 *
	 * Constraint:
	 *     pourcentage=INT
	 */
	protected void sequence_Predire(ISerializationContext context, Predire semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PREDIRE__POURCENTAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PREDIRE__POURCENTAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredireAccess().getPourcentageINTTerminalRuleCall_1_0(), semanticObject.getPourcentage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Regression returns Regression
	 *
	 * Constraint:
	 *     (fichier=Fichier delimiteur=Delimiteur algorithme=Algorithme predire=Predire)
	 */
	protected void sequence_Regression(ISerializationContext context, Regression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REGRESSION__FICHIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REGRESSION__FICHIER));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REGRESSION__DELIMITEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REGRESSION__DELIMITEUR));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REGRESSION__ALGORITHME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REGRESSION__ALGORITHME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REGRESSION__PREDIRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REGRESSION__PREDIRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRegressionAccess().getFichierFichierParserRuleCall_0_0(), semanticObject.getFichier());
		feeder.accept(grammarAccess.getRegressionAccess().getDelimiteurDelimiteurParserRuleCall_1_0(), semanticObject.getDelimiteur());
		feeder.accept(grammarAccess.getRegressionAccess().getAlgorithmeAlgorithmeEnumRuleCall_3_0(), semanticObject.getAlgorithme());
		feeder.accept(grammarAccess.getRegressionAccess().getPredirePredireParserRuleCall_4_0(), semanticObject.getPredire());
		feeder.finish();
	}
	
	
}
