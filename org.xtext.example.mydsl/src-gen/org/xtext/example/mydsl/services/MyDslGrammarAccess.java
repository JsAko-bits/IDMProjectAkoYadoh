/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cRegressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRegressionsRegressionParserRuleCall_0 = (RuleCall)cRegressionsAssignment.eContents().get(0);
		
		//Model:
		//	regressions=Regression;
		@Override public ParserRule getRule() { return rule; }
		
		//regressions=Regression
		public Assignment getRegressionsAssignment() { return cRegressionsAssignment; }
		
		//Regression
		public RuleCall getRegressionsRegressionParserRuleCall_0() { return cRegressionsRegressionParserRuleCall_0; }
	}
	public class RegressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Regression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFichierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFichierFichierParserRuleCall_0_0 = (RuleCall)cFichierAssignment_0.eContents().get(0);
		private final Assignment cDelimiteurAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelimiteurDelimiteurParserRuleCall_1_0 = (RuleCall)cDelimiteurAssignment_1.eContents().get(0);
		private final Keyword cAlgorithmeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAlgorithmeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAlgorithmeAlgorithmeEnumRuleCall_3_0 = (RuleCall)cAlgorithmeAssignment_3.eContents().get(0);
		private final Assignment cPredireAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredirePredireParserRuleCall_4_0 = (RuleCall)cPredireAssignment_4.eContents().get(0);
		
		//Regression:
		//	fichier=Fichier
		//	delimiteur=Delimiteur
		//	'Algorithme' algorithme=Algorithme
		//	predire=Predire;
		@Override public ParserRule getRule() { return rule; }
		
		//fichier=Fichier delimiteur=Delimiteur 'Algorithme' algorithme=Algorithme predire=Predire
		public Group getGroup() { return cGroup; }
		
		//fichier=Fichier
		public Assignment getFichierAssignment_0() { return cFichierAssignment_0; }
		
		//Fichier
		public RuleCall getFichierFichierParserRuleCall_0_0() { return cFichierFichierParserRuleCall_0_0; }
		
		//delimiteur=Delimiteur
		public Assignment getDelimiteurAssignment_1() { return cDelimiteurAssignment_1; }
		
		//Delimiteur
		public RuleCall getDelimiteurDelimiteurParserRuleCall_1_0() { return cDelimiteurDelimiteurParserRuleCall_1_0; }
		
		//'Algorithme'
		public Keyword getAlgorithmeKeyword_2() { return cAlgorithmeKeyword_2; }
		
		//algorithme=Algorithme
		public Assignment getAlgorithmeAssignment_3() { return cAlgorithmeAssignment_3; }
		
		//Algorithme
		public RuleCall getAlgorithmeAlgorithmeEnumRuleCall_3_0() { return cAlgorithmeAlgorithmeEnumRuleCall_3_0; }
		
		//predire=Predire
		public Assignment getPredireAssignment_4() { return cPredireAssignment_4; }
		
		//Predire
		public RuleCall getPredirePredireParserRuleCall_4_0() { return cPredirePredireParserRuleCall_4_0; }
	}
	public class FichierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fichier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFichierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Fichier:
		//	'Fichier' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fichier' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'Fichier'
		public Keyword getFichierKeyword_0() { return cFichierKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class DelimiteurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Delimiteur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelimiteurKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Delimiteur:
		//	'Delimiteur' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Delimiteur' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'Delimiteur'
		public Keyword getDelimiteurKeyword_0() { return cDelimiteurKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class PredireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Predire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPourcentageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPourcentageINTTerminalRuleCall_1_0 = (RuleCall)cPourcentageAssignment_1.eContents().get(0);
		
		//Predire:
		//	'Predire' pourcentage=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Predire' pourcentage=INT
		public Group getGroup() { return cGroup; }
		
		//'Predire'
		public Keyword getPredireKeyword_0() { return cPredireKeyword_0; }
		
		//pourcentage=INT
		public Assignment getPourcentageAssignment_1() { return cPourcentageAssignment_1; }
		
		//INT
		public RuleCall getPourcentageINTTerminalRuleCall_1_0() { return cPourcentageINTTerminalRuleCall_1_0; }
	}
	
	public class AlgorithmeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Algorithme");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTreeRegressionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTreeRegressionTRKeyword_0_0 = (Keyword)cTreeRegressionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSVMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSVMSVMKeyword_1_0 = (Keyword)cSVMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLinearEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLinearLinearKeyword_2_0 = (Keyword)cLinearEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Algorithme:
		//	TreeRegression='TR' | SVM | Linear;
		public EnumRule getRule() { return rule; }
		
		//TreeRegression='TR' | SVM | Linear
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TreeRegression='TR'
		public EnumLiteralDeclaration getTreeRegressionEnumLiteralDeclaration_0() { return cTreeRegressionEnumLiteralDeclaration_0; }
		
		//'TR'
		public Keyword getTreeRegressionTRKeyword_0_0() { return cTreeRegressionTRKeyword_0_0; }
		
		//SVM
		public EnumLiteralDeclaration getSVMEnumLiteralDeclaration_1() { return cSVMEnumLiteralDeclaration_1; }
		
		//'SVM'
		public Keyword getSVMSVMKeyword_1_0() { return cSVMSVMKeyword_1_0; }
		
		//Linear
		public EnumLiteralDeclaration getLinearEnumLiteralDeclaration_2() { return cLinearEnumLiteralDeclaration_2; }
		
		//'Linear'
		public Keyword getLinearLinearKeyword_2_0() { return cLinearLinearKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final RegressionElements pRegression;
	private final FichierElements pFichier;
	private final DelimiteurElements pDelimiteur;
	private final AlgorithmeElements eAlgorithme;
	private final PredireElements pPredire;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRegression = new RegressionElements();
		this.pFichier = new FichierElements();
		this.pDelimiteur = new DelimiteurElements();
		this.eAlgorithme = new AlgorithmeElements();
		this.pPredire = new PredireElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	regressions=Regression;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Regression:
	//	fichier=Fichier
	//	delimiteur=Delimiteur
	//	'Algorithme' algorithme=Algorithme
	//	predire=Predire;
	public RegressionElements getRegressionAccess() {
		return pRegression;
	}
	
	public ParserRule getRegressionRule() {
		return getRegressionAccess().getRule();
	}
	
	//Fichier:
	//	'Fichier' name=STRING;
	public FichierElements getFichierAccess() {
		return pFichier;
	}
	
	public ParserRule getFichierRule() {
		return getFichierAccess().getRule();
	}
	
	//Delimiteur:
	//	'Delimiteur' name=STRING;
	public DelimiteurElements getDelimiteurAccess() {
		return pDelimiteur;
	}
	
	public ParserRule getDelimiteurRule() {
		return getDelimiteurAccess().getRule();
	}
	
	//enum Algorithme:
	//	TreeRegression='TR' | SVM | Linear;
	public AlgorithmeElements getAlgorithmeAccess() {
		return eAlgorithme;
	}
	
	public EnumRule getAlgorithmeRule() {
		return getAlgorithmeAccess().getRule();
	}
	
	//Predire:
	//	'Predire' pourcentage=INT;
	public PredireElements getPredireAccess() {
		return pPredire;
	}
	
	public ParserRule getPredireRule() {
		return getPredireAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
