/**
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.tests.MyDslInjectorProvider;
import org.xtext.example.mydsl.tests.MyInterpreter;
import org.xtext.example.mydsl.tests.PythonCompiler;
import org.xtext.example.mydsl.tests.RCompiler;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyDslInjectorProvider.class)
@SuppressWarnings("all")
public class MyDslParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void loadModelPythonLinear() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Fichier \"data.txt\"");
      _builder.newLine();
      _builder.append("Delimiteur \",\"");
      _builder.newLine();
      _builder.append("Algorithme Linear");
      _builder.newLine();
      _builder.append("Predire 75");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      InputOutput.<Model>println(result);
      final PythonCompiler pCom = new PythonCompiler(result);
      pCom.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelPythonSVM() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Fichier \"data.txt\"");
      _builder.newLine();
      _builder.append("Delimiteur \",\"");
      _builder.newLine();
      _builder.append("Algorithme SVM");
      _builder.newLine();
      _builder.append("Predire 75");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      InputOutput.<Model>println(result);
      final PythonCompiler pCom = new PythonCompiler(result);
      pCom.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelPythonTR() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Fichier \"data.txt\"");
      _builder.newLine();
      _builder.append("Delimiteur \",\"");
      _builder.newLine();
      _builder.append("Algorithme TR");
      _builder.newLine();
      _builder.append("Predire 75");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      InputOutput.<Model>println(result);
      final PythonCompiler pCom = new PythonCompiler(result);
      pCom.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelRLinear() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Fichier \"data.txt\"");
      _builder.newLine();
      _builder.append("Delimiteur \",\"");
      _builder.newLine();
      _builder.append("Algorithme Linear");
      _builder.newLine();
      _builder.append("Predire 75");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      InputOutput.<Model>println(result);
      final RCompiler rCom = new RCompiler(result);
      rCom.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelRSVM() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Fichier \"data.txt\"");
      _builder.newLine();
      _builder.append("Delimiteur \",\"");
      _builder.newLine();
      _builder.append("Algorithme SVM");
      _builder.newLine();
      _builder.append("Predire 75");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      InputOutput.<Model>println(result);
      final RCompiler rCom = new RCompiler(result);
      rCom.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelRTR() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Fichier \"data.txt\"");
      _builder.newLine();
      _builder.append("Delimiteur \",\"");
      _builder.newLine();
      _builder.append("Algorithme TR");
      _builder.newLine();
      _builder.append("Predire 75");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      InputOutput.<Model>println(result);
      final RCompiler rCom = new RCompiler(result);
      rCom.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelPythonR() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Fichier \"data.txt\"");
      _builder.newLine();
      _builder.append("Delimiteur \",\"");
      _builder.newLine();
      _builder.append("Algorithme Linear");
      _builder.newLine();
      _builder.append("Predire 75");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      InputOutput.<Model>println(result);
      final PythonCompiler pCom = new PythonCompiler(result);
      final RCompiler rCom = new RCompiler(result);
      pCom.compileAndRun();
      rCom.compileAndRun();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModelInterpreterLinear() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Fichier \"dataset\\\\dataTest.arff\"");
      _builder.newLine();
      _builder.append("Delimiteur \",\"");
      _builder.newLine();
      _builder.append("Predire 75");
      _builder.newLine();
      _builder.append("Algorithme Linear");
      _builder.newLine();
      final String r = _builder.toString();
      Assertions.assertNotNull(r);
      final MyInterpreter inter = new MyInterpreter(r);
      inter.run();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
