/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.myDsl.Model

@ExtendWith(InjectionExtension)
@InjectWith(MyDslInjectorProvider)
class MyDslParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void loadModelPythonLinear() {
		val result = parseHelper.parse('''
			Fichier "data.txt"
			Delimiteur ","
			Algorithme Linear
			Predire 75
		''')
		
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(result)
		val PythonCompiler pCom = new PythonCompiler(result)
		pCom.compileAndRun

	}
	
	@Test
	def void loadModelPythonSVM() {
		val result = parseHelper.parse('''
			Fichier "data.txt"
			Delimiteur ","
			Algorithme SVM
			Predire 75
		''')
		
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(result)
		val PythonCompiler pCom = new PythonCompiler(result)
		pCom.compileAndRun

	}
	
	@Test
	def void loadModelPythonTR() {
		val result = parseHelper.parse('''
			Fichier "data.txt"
			Delimiteur ","
			Algorithme TR
			Predire 75
		''')
		
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(result)
		val PythonCompiler pCom = new PythonCompiler(result)
		pCom.compileAndRun

	}
	
		@Test
	def void loadModelRLinear() {
		val result = parseHelper.parse('''
			Fichier "data.txt"
			Delimiteur ","
			Algorithme Linear
			Predire 75
		''')
		
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(result)
		val RCompiler rCom = new RCompiler(result)
		rCom.compileAndRun

	}
	
		@Test
	def void loadModelRSVM() {
		val result = parseHelper.parse('''
			Fichier "data.txt"
			Delimiteur ","
			Algorithme SVM
			Predire 75
		''')
		
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(result)
		val RCompiler rCom = new RCompiler(result)
		rCom.compileAndRun

	}
	
		@Test
	def void loadModelRTR() {
		val result = parseHelper.parse('''
			Fichier "data.txt"
			Delimiteur ","
			Algorithme TR
			Predire 75
		''')
		
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(result)
		val RCompiler rCom = new RCompiler(result)
		rCom.compileAndRun

	}
		
		@Test
	def void loadModelPythonR() {
		val result = parseHelper.parse('''
			Fichier "data.txt"
			Delimiteur ","
			Algorithme Linear
			Predire 75
		''')
		
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		println(result)
		val PythonCompiler pCom = new PythonCompiler(result)
		val RCompiler rCom = new RCompiler(result)
		pCom.compileAndRun
		rCom.compileAndRun

	}
	
		@Test
	def void loadModelInterpreterLinear() {
		
		val r = '''Fichier "dataset\\dataTest.arff"
Delimiteur ","
Predire 75
Algorithme Linear
'''
		Assertions.assertNotNull(r)
		val MyInterpreter inter = new MyInterpreter(r)
		inter.run

	}
	
}
